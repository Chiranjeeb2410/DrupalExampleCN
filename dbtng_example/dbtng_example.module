<?php
/**
 * @file
 * 这个实例用于简单介绍 Drupal 7 中新的 DBTNG 数据库 API。
 *
 * @todo 演示事务.
 *
 * 文档可以参看
 * @link 数据抽象层 @endlink 以及
 * @link http://drupal.org/node/310069 @endlink.
 */

/**
 * @defgroup dbtng_example Example: Database (DBTNG)
 * @ingroup examples
 * @{
 * 包含 DBTNG 的数据库示例。
 *
 * 'DBTNG' 意思是 'Database: The Next Generation.' 下一代数据库。
 *
 * 这里的几个例子用来演示基本的数据库操作方法。
 *
 * 在 Drupal 6 中，更新或写入数据库记录推荐使用 drupal_write_record() 或 db_query()、
 *
 * Drupal 7 和以后的版本，INSERT, UPDATE 或者 DELETE 已经不再建议使用 db_query()，有
 * 新的专用函数取而代之： db_insert()， db_update() 以及 db_delete()。（注意，
 * drupal_write_record()也在淡出行列中）。
 *
 * db_insert() 实例:
 * @code
 *   // INSERT INTO {dbtng_example} (name, surname) VALUES('John, 'Doe')
 *   db_insert('dbtng_example')
 *     ->fields(array('name' => 'John', 'surname' => 'Doe'))
 *     ->execute();
 * @endcode
 *
 * db_update() 实例:
 * @code
 *   // UPDATE {dbtng_example} SET name = 'Jane' WHERE name = 'John'
 *   db_update('dbtng_example')
 *     ->fields(array('name' => 'Jane'))
 *     ->condition('name', 'John')
 *     ->execute();
 * @endcode
 *
 * db_delete() 实例:
 * @code
 *   // DELETE FROM {dbtng_example} WHERE name = 'Jane'
 *   db_delete('dbtng_example')
 *     ->condition('name', 'Jane')
 *     ->execute();
 * @endcode
 *
 * See @link 数据抽象层 @endlink
 * @see db_insert()
 * @see db_update()
 * @see db_delete()
 * @see drupal_write_record()
 */

/**
 * 在数据库中保存记录
 *
 * DBTNG 中使用 db_insert() 来完成这一操作。
 *
 * Drupal 6 中会这样完成这一任务：
 * @code
 *   db_query(
 *     "INSERT INTO {dbtng_example} (name, surname, age)
 *       VALUES ('%s', '%s', '%d')",
 *     $entry['name'],
 *     $entry['surname'],
 *     $entry['age']
 *   );
 * @endcode
 *
 * 例子中会演示异常处理的内容，虽然去掉 try/catch 块能让代码简单很多，但是插入过程如果抛
 * 出未被捕获的异常，会中断应用的执行，所以最好还是使用 try/catch 来应对。
 *
 * @param array $entry
 *   一个包含所有字段的数组，用于表达数据库记录数据。
 *
 * @see db_insert()
 */
function dbtng_example_entry_insert($entry) {
  $return_value = NULL;
  try {
    $return_value = db_insert('dbtng_example')
                    ->fields($entry)
                    ->execute();
  }
  catch (Exception $e) {
    drupal_set_message(t('db_insert failed. Message = %message, query= %query',
      array('%message' => $e->getMessage(), '%query' => $e->query_string)), 'error');
  }
  return $return_value;
}

/**
 * 更新数库中的数据
 *
 * 以前使用的是 db_query() 或者 drupal_write_record()，这两种方式已经被弃用。
 * @code
 *  drupal_write_record('dbtng_example', $entry, $entry['pid']);
 * @endcode
 *
 * @code
 *  db_query(
 *    "UPDATE {dbtng_example}
 *     SET name = '%s', surname = '%s', age = '%d'
 *     WHERE pid = %d",
 *     $entry['pid']
 *  );
 * @endcode
 *
 * @param array $entry
 *   一个包含被更新记录所有字段数据的数组。
 *
 * @see db_update()
 */
function dbtng_example_entry_update($entry) {
  try {
    // db_update()...->execute() 会返回更新的数据条数。
    $count = db_update('dbtng_example')
              ->fields($entry)
              ->condition('pid', $entry['pid'])
              ->execute();
  }
  catch (Exception $e) {
    drupal_set_message(t('db_update failed. Message = %message, query= %query',
      array('%message' => $e->getMessage(), '%query' => $e->query_string)), 'error');
  }
  return $count;
}

/**
 * 从数据库中删除记录。
 *
 * db_query 已经不建议使用。
 * 以前的数据库记录删除是这样的：
 * @code
 *  db_query("DELETE FROM {dbtng_example} WHERE pid = %d", $entry['pid]);
 * @endcode
 *
 * @param array $entry
 *   一个包含数据库条目的数组，其中的值至少要包含 pid 这一主键。
 *
 * @see db_delete()
 */
function dbtng_example_entry_delete($entry) {
  db_delete('dbtng_example')
    ->condition('pid', $entry['pid'])
    ->execute();

}


/**
 * 利用一个过滤数组来从数据库中进行读取。
 *
 * 在 Drupal 6 中，标准的读函数以及静态查询函数都是使用 db_query()。
 * db_query() 使用一个带有占位符和参数数组的 SQL 进行查询。
 *
 * @code
 *  // 老式方法
 *  $query = "SELECT * FROM {dbtng_example} n WHERE n.uid = %d AND name = '%s'";
 *  $result = db_query($query, $uid, $name);
 * @endcode
 *
 * Drupal 7 DBTNG 提供了一个抽象接口，能够适应更多的数据库引擎。
 *

 * db_query() 只建议使用在静态查询上。下面的情况在 Drupal 7 中是可以接受的：
 * @link http://drupal.org/node/310072 关于静态查询的内容 @endlink
 *
 * @code
 *   // SELECT * FROM {dbtng_example} WHERE uid = 0 AND name = 'John'
 *   db_query(
 *     "SELECT * FROM {dbtng_example} WHERE uid = :uid and name = :name",
 *     array(':uid' => 0, ':name' => 'John')
 *   )->execute();
 * @endcode
 *
 * 不过对于动态查询来说， Drupal 提供了 db_select() 这一 API，所以同一个 SQL 查询可能
 * 有多个不同的方法来完成。参见
 * @link http://drupal.org/node/310075 手册中的动态查询部分内容 @endlink
 *
 * @code
 *   // SELECT * FROM {dbtng_example} WHERE uid = 0 AND name = 'John'
 *   db_select('dbtng_example')
 *     ->fields('dbtng_example')
 *     ->condition('uid', 0)
 *     ->condition('name', 'John')
 *     ->execute();
 * @endcode
 *
 * 这里展示了 db_select 中具名占位符的用法。
 * @code
 *   // SELECT * FROM {dbtng_example} WHERE uid = 0 AND name = 'John'
 *   $arguments = array(':name' => 'John', ':uid' => 0);
 *   db_select('dbtng_example')
 *     ->fields('dbtng_example')
 *     ->where('uid = :uid AND name = :name', $arguments)
 *     ->execute();
 * @endcode
 *
 * 查询条件是一个链式方法，采用 AND 还是 OR 连接，取决于生成 condition 的函数
 * 详情可以参考条件查询手册：http://drupal.org/node/310086
 * 缺省情况下的逻辑操作符是等于：
 * @code
 *   // SELECT * FROM {dbtng_example} WHERE age > 18
 *   db_select('dbtng_example')
 *     ->fields('dbtng_example')
 *     ->condition('age', 18, '>')
 *     ->execute();
 * @endcode
 *
 * @param array $entry
 *   用于搜索的所有字段组合起来的一个数组。
 *
 * @return object
 *   如果找到记录，则以对象的形式返回。
 *
 * @see db_select()
 * @see db_query()
 * @see http://drupal.org/node/310072
 * @see http://drupal.org/node/310075
 */
function dbtng_example_entry_load($entry = array()) {
  // 从 dbtng_example 表中读取所有字段。
  $select = db_select('dbtng_example', 'example');
  $select->fields('example');

  // 把每个字段和值作为一个条件
  foreach ($entry as $field => $value) {
    $select->condition($field, $value);
  }
  // 用对象形式返回结果
  return $select->execute()->fetchAll();
}

/**
 * 渲染一个数据库中输出的过滤后的记录列表。
 *
 * DBTNG 能够以对象的方式输出结果，以此协助处理返回多行记录的查询。
 *
 * 下面函数中的查询使用了一个 JOIN，用来连接 users 和 example 表，目的是返回一个带有用
 * 户名的结果，并根据结果逐行以表格的形式进行输出。
 *
 * SELECT
 *  e.pid as pid, e.name as name, e.surname as surname, e.age as age
 *  u.name as username
 * FROM
 *  {dbtng_example} e
 * JOIN
 *  users u ON e.uid = u.uid
 * WHERE
 *  e.name = 'John' AND e.age > 18
 *
 * @see db_select()
 * @see http://drupal.org/node/310075
 */
function dbtng_example_advanced_list() {
  $output = '';

  $select = db_select('dbtng_example', 'e');

  // 连接用户表，以便获取创建者的用户名。
  $select->join('users', 'u', 'e.uid = u.uid');
  // 选择需要输出的字段。
  $select->addField('e', 'pid');
  $select->addField('u', 'name', 'username');
  $select->addField('e', 'name');
  $select->addField('e', 'surname');
  $select->addField('e', 'age');
  // 只要用户名是 John 的记录。
  $select->condition('e.name', 'John');
  // 只要18岁以上的。
  $select->condition('e.age', 18, '>');
  // 只获取 0-49 条记录。
  $select->range(0, 50);

  // 现在开始循环所有记录，并展示在一个表格中。注意这里没有使用 db_fetch_*。另外
  // 后面的  $entries = $select->execute()->fetchAll() 返回的是对象而不是数组。
  $entries = $select->execute()->fetchAll(PDO::FETCH_ASSOC);
  if (!empty($entries)) {
    $rows = array();
    foreach ($entries as $entry) {
      // 在提交给主题层进行展示之前，首先清理数据。
      $rows[] = array_map('check_plain', $entry);
    }
    // 输出表格。
    $header = array(t('Id'), t('Created by'), t('Name'), t('Surname'), t('Age'));
    $output .= theme('table', array('header' => $header, 'rows' => $rows));
  }
  else {
    drupal_set_message(t('No entries meet the filter criteria (Name = "John" and Age > 18).'));
  }
  return $output;
}

/**
 * Implements hook_help().
 *
 * 为本模块输出的 Form 提供一些帮助说明。
 */
function dbtng_example_help($path) {
  $output = '';
  switch ($path) {
    case 'examples/dbtng':
      $output = t('Generate a list of all entries in the database. There is no filter in the query.');
      break;

    case 'examples/dbtng/advanced':
      $output  = t('A more complex list of entries in the database.') . ' ';
      $output .= t('Only the entries with name = "John" and age older than 18 years are shown, the username of the person who created the entry is also shown.');
      break;

    case 'examples/dbtng/update':
      $output = t('Demonstrates a database update operation.');
      break;

    case 'examples/dbtng/add':
      $output = t('Add an entry to the dbtng_example table.');
      break;
  }
  return $output;
}

/**
 * Implements hook_menu().
 *
 */
function dbtng_example_menu() {
  $items = array();

  $items['examples/dbtng'] = array(
    'title' => 'DBTNG Example',
    'page callback' => 'dbtng_example_list',
    'access callback' => TRUE,
  );
  $items['examples/dbtng/list'] = array(
    'title' => 'List',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['examples/dbtng/add'] = array(
    'title' => 'Add entry',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dbtng_example_form_add'),
    'access callback' => TRUE,
    'type' => MENU_LOCAL_TASK,
    'weight' => -9,
  );
  $items['examples/dbtng/update'] = array(
    'title' => 'Update entry',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dbtng_example_form_update'),
    'type' => MENU_LOCAL_TASK,
    'access callback' => TRUE,
    'weight' => -5,
  );
  $items['examples/dbtng/advanced'] = array(
    'title' => 'Advanced list',
    'page callback' => 'dbtng_example_advanced_list',
    'access callback' => TRUE,
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * 把数据库记录渲染为列表
 */
function dbtng_example_list() {
  $output = '';

  // 获取 dbtng_example 数据表中的全部内容。
  if ($entries = dbtng_example_entry_load()) {
    $rows = array();
    foreach ($entries as $entry) {
      // 在提交给主题层进行展示之前，首先清理数据。
      $rows[] = array_map('check_plain', (array) $entry);
    }
    // 输出 table。
    $header = array(t('Id'), t('uid'), t('Name'), t('Surname'), t('Age'));
    $output .= theme('table', array('header' => $header, 'rows' => $rows));
  }
  else {
    drupal_set_message(t('No entries have been added yet.'));
  }
  return $output;
}

/**
 * 一个用于新增记录的 Form。
 */
function dbtng_example_form_add($form, &$form_state) {
  $form = array();

  $form['add'] = array(
    '#type'  => 'fieldset',
    '#title' => t('Add a person entry'),
  );
  $form['add']['name'] = array(
    '#type'  => 'textfield',
    '#title' => t('Name'),
    '#size'  => 15,
  );
  $form['add']['surname'] = array(
    '#type'  => 'textfield',
    '#title' => t('Surname'),
    '#size'  => 15,
  );
  $form['add']['age'] = array(
    '#type'  => 'textfield',
    '#title' => t('Age'),
    '#size'  => 5,
    '#description' => t("Values greater than 127 will cause an exception. Try it - it's a great example why exception handling is needed with DTBNG."),
  );
  $form['add']['submit'] = array(
    '#type'  => 'submit',
    '#value' => t('Add'),
  );

  return $form;
}

/**
 * 新建记录 Form 的提交处理。
 */
function dbtng_example_form_add_submit($form, &$form_state) {
  global $user;

  // Save the submitted entry.
  $entry = array(
    'name'    => $form_state['values']['name'],
    'surname' => $form_state['values']['surname'],
    'age'     => $form_state['values']['age'],
    'uid'     => $user->uid,
  );
  $return = dbtng_example_entry_insert($entry);
  if ($return) {
    drupal_set_message(t("Created entry @entry", array('@entry' => print_r($entry, TRUE))));
  }
}

/**
 * 跟新记录的界面。
 */
function dbtng_example_form_update($form, &$form_state) {
  $form = array(
    '#prefix' => '<div id="updateform">',
    '#suffix' => '</div>',
  );

  $entries = dbtng_example_entry_load();
  $keyed_entries = array();
  if (empty($entries)) {
    $form['no_values'] = array(
      '#value' => t("No entries exist in the table dbtng_example table."),
    );
    return $form;
  }

  foreach ($entries as $entry) {
    $options[$entry->pid] = t("@pid: @name @surname (@age)",
      array(
        '@pid' => $entry->pid,
        '@name' => $entry->name,
        '@surname' => $entry->surname,
        '@age' => $entry->age,
      )
    );
    $keyed_entries[$entry->pid] = $entry;
  }
  $default_entry = !empty($form_state['values']['pid']) ? $keyed_entries[$form_state['values']['pid']] : $entries[0];

  $form_state['entries'] = $keyed_entries;

  $form['pid'] = array(
    '#type' => 'select',
    '#options' => $options,
    '#title' => t('Choose entry to update'),
    '#default_value' => $default_entry->pid,
    '#ajax' => array(
      'wrapper' => 'updateform',
      'callback' => 'dbtng_example_form_update_callback',
    ),
  );

  $form['name'] = array(
    '#type' => 'textfield',
    '#title' => t('Updated first name'),
    '#size' => 15,
    '#default_value' => $default_entry->name,
  );

  $form['surname'] = array(
    '#type' => 'textfield',
    '#title' => t('Updated last name'),
    '#size' => 15,
    '#default_value' => $default_entry->surname,
  );
  $form['age'] = array(
    '#type' => 'textfield',
    '#title' => t('Updated age'),
    '#size' => 4,
    '#default_value' => $default_entry->age,
    '#description' => t("Values greater than 127 will cause an exception"),
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Update'),
  );
  return $form;
}

/**
 * pid 选择的 AJAX 回调。
 *
 * 在 pid 发生变化的时候，从数据库获取缺省值设置到 Form 里。
 */
function dbtng_example_form_update_callback($form, $form_state) {
  $entry = $form_state['entries'][$form_state['values']['pid']];

  // 设置 #value 是这个场景下唯一一个替换缺省值的方法。 #default_value 是无效的。
  foreach (array('name', 'surname', 'age') as $item) {
    $form[$item]['#value'] = $entry->$item;
  }
  return $form;
}

/**
 * 更新数据 Form 的提交处理。
 */
function dbtng_example_form_update_submit($form, &$form_state) {
  global $user;

  // 保存提交的数据
  $entry = array(
    'pid' => $form_state['values']['pid'],
    'name' => $form_state['values']['name'],
    'surname' => $form_state['values']['surname'],
    'age' => $form_state['values']['age'],
    'uid' => $user->uid,
  );
  $count = dbtng_example_entry_update($entry);
  drupal_set_message(t("Updated entry @entry (@count row updated)",
    array('@count' => $count, '@entry' => print_r($entry, TRUE))));
}
/**
 * @} End of "defgroup dbtng_example".
 */
