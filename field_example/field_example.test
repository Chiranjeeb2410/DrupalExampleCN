<?php
/**
 * @file
 * Tests for Field Example.
 */

/**
 * 字段示例模块的功能测试。
 *
 * @ingroup field_example
 */
class FieldExampleTest extends DrupalWebTestCase {

  /**
   * {@inheritdoc}
   */
  public static function getInfo() {
    return array(
      'name' => 'Field Example',
      'description' => 'Create a content type with example_field_rgb fields, create a node, check for correct values.',
      'group' => 'Examples',
    );
  }

  /**
   * {@inheritdoc}
   */
  public function setUp() {
    // 启用email_example模块
    parent::setUp(array('field_ui', 'field_example'));
  }

  /**
   * 字段实例的基本功能测试：
   * - 创建一个内容类型。
   * - 添加一个单值field_example_rgb字段到新的内容类型。
   * - 添加一个多值field_example_rgb字段到新的内容类型。
   * - 创建一个这种类型的新Node。
   * - 填写单值字段。
   * - 在多值字段填写两项。
   * - 测试结果。
   */
  public function testExampleFieldBasic() {
    $content_type_machine = strtolower($this->randomName(10));
    $title = $this->randomName(20);

    // 创建一个登录用户。
    $account = $this->drupalCreateUser(array('administer content types'));
    $this->drupalLogin($account);

    $this->drupalGet('admin/structure/types');

    // 创建内容类型。
    $this->clickLink(t('Add content type'));

    $edit = array(
      'name' => $content_type_machine,
      'type' => $content_type_machine,
    );
    $this->drupalPost(NULL, $edit, t('Save and add fields'));
    $this->assertText(t('The content type @name has been added.', array('@name' => $content_type_machine)));

    $single_text_field = strtolower($this->randomName(10));
    $single_colorpicker_field = strtolower($this->randomName(10));
    $single_3text_field = strtolower($this->randomName(10));
    $multivalue_3text_field = strtolower($this->randomName(10));

    // Description of fields to be created;
    //
    $fields[$single_text_field] = array(
      'widget' => 'field_example_text',
      'cardinality' => '1',
    );
    $fields[$single_colorpicker_field] = array(
      'widget' => 'field_example_colorpicker',
      'cardinality' => 1,
    );
    $fields[$single_3text_field] = array(
      'widget' => 'field_example_3text',
      'cardinality' => 1,
    );
    $fields[$multivalue_3text_field] = array(
      'widget' => 'field_example_3text',
      'cardinality' => -1,
    );

    foreach ($fields as $fieldname => $details) {
      $this->createField($fieldname, $details['widget'], $details['cardinality']);
    }

    // 有时候只是点击"保存"是不够的，我们必须还要执行node_types_rebuild()
    node_types_rebuild();
    menu_rebuild();
    $type_exists = db_query('SELECT 1 FROM {node_type} WHERE type = :type', array(':type' => $content_type_machine))->fetchField();
    $this->assertTrue($type_exists, 'The new content type has been created in the database.');

    $permission = 'create ' . $content_type_machine . ' content';
    // 重建授权缓存。
    $this->checkPermissions(array($permission), TRUE);

    // 现在我们有了一个新的内容类型，创建一个有权操作这种内容类型的用户。
    $account = $this->drupalCreateUser(array($permission));
    $this->drupalLogin($account);

    $this->drupalGet('node/add/' . $content_type_machine);

    // 添加一个Node。
    $edit = array(
      'title' => $title,
      'field_' . $single_text_field . '[und][0][rgb]' => '#000001',
      'field_' . $single_colorpicker_field . '[und][0][rgb]' => '#000002',

      'field_' . $single_3text_field . '[und][0][rgb][r]' => '00',
      'field_' . $single_3text_field . '[und][0][rgb][g]' => '00',
      'field_' . $single_3text_field . '[und][0][rgb][b]' => '03',

      'field_' . $multivalue_3text_field . '[und][0][rgb][r]' => '00',
      'field_' . $multivalue_3text_field . '[und][0][rgb][g]' => '00',
      'field_' . $multivalue_3text_field . '[und][0][rgb][b]' => '04',

    );

    // 我们想添加第二个项，所以点击“添加另一个”。
    $this->drupalPost(NULL, $edit, t('Add another item'));

    $edit = array(
      'field_' . $multivalue_3text_field . '[und][1][rgb][r]' => '00',
      'field_' . $multivalue_3text_field . '[und][1][rgb][g]' => '00',
      'field_' . $multivalue_3text_field . '[und][1][rgb][b]' => '05',
    );

    // 现在我们可以填写第二个项，赋予多个值，并保存。
    $this->drupalPost(NULL, $edit, t('Save'));
    $this->assertText(t('@content_type_machine @title has been created', array('@content_type_machine' => $content_type_machine, '@title' => $title)));

    $output_strings = $this->xpath("//div[contains(@class,'field-type-field-example-rgb')]/div/div/p/text()");

    $this->assertEqual((string) $output_strings[0], "The color code in this field is #000001");
    $this->assertEqual((string) $output_strings[1], "The color code in this field is #000002");
    $this->assertEqual((string) $output_strings[2], "The color code in this field is #000003");
    $this->assertEqual((string) $output_strings[3], "The color code in this field is #000004");
    $this->assertEqual((string) $output_strings[4], "The color code in this field is #000005");
  }

  /**
   * 工具函数，用于在一个内容类型上创建字段。
   *
   * @param string $field_name
   *   字段名称， 例如field_something
   * @param string $widget_type
   *   微件类型，例如field_example_3text
   * @param int $cardinality
   *   Cardinality
   */
  protected function createField($field_name, $widget_type, $cardinality) {
    // 添加一个单值的field_example_text字段
    $edit = array(
      'fields[_add_new_field][label]' => $field_name,
      'fields[_add_new_field][field_name]' => $field_name,
      'fields[_add_new_field][type]' => 'field_example_rgb',
      'fields[_add_new_field][widget_type]' => $widget_type,

    );
    $this->drupalPost(NULL, $edit, t('Save'));

    // 没有需要设置的项目，所以只是按一下按钮。
    $this->drupalPost(NULL, array(), t('Save field settings'));

    $edit = array('field[cardinality]' => (string) $cardinality);

    // 使用所有的缺省设置，所以按按钮就可以了。
    $this->drupalPost(NULL, $edit, t('Save settings'));
    debug(
      t('Saved settings for field %field_name with widget %widget_type and cardinality %cardinality',
        array(
          '%field_name' => $field_name,
          '%widget_type' => $widget_type,
          '%cardinality' => $cardinality,
        )
      )
    );
    $this->assertText(t('Saved @name configuration.', array('@name' => $field_name)));
  }
}
