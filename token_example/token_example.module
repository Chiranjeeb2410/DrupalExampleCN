<?php

/**
 * @file
 * An example module showing how to define and use tokens.
 *
 * The Token module provides an API for providing tokens to other modules.
 * Tokens are small bits of text that can be placed into larger documents
 * via simple placeholders, like %site-name or [user].
 */

/**
 * @defgroup token_example Example: Token API
 * @ingroup examples
 * @{
 * 示例：使用Token API。
 *
 * Token模块具有一组API，用于为其他模块提供Token。Token是一小段文本，可以使用简单的占位符
 * 嵌入到大文档中，例如 %site-name 或者 [user]
 *
 * Drupal 7的Token文档可以在下面网址找到：
 * http://drupal.org/documentation/modules/token
 *
 * 下面网址列出了现有的Token：
 * http://drupal.org/node/390482#drupal7tokenslist
 *
 * 这个示例是Example项目的一部分，你可以在下面网址下载和体验：
 * http://drupal.org/project/examples
 */

/**
 * Implements hook_menu().
 */
function token_example_menu() {
  $items['examples/token'] = array(
    'title' => 'Token示范',
    'description' => '演示Token替换。',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('token_example_example_form'),
    'access callback' => TRUE,
  );
  return $items;
}

/**
 * Implements hook_entity_info_alter().
 *
 * @todo 如果testbot能够正确的处理第三方模块的依赖，可以去掉这一部分
 */
function token_example_entity_info_alter(&$info) {
  if (isset($info['taxonomy_term'])) {
    $info['taxonomy_term']['token type'] = 'term';
  }
  if (isset($info['taxonomy_vocabulary'])) {
    $info['taxonomy_vocabulary']['token type'] = 'vocabulary';
  }
}

/**
 * 生成Form, 其中是一个包含了支持token的实体和文字的列表
 */
function token_example_example_form($form, &$form_state) {
  $entities = entity_get_info();
  $token_types = array();

  //扫描实体列表，查找支持Token的实体。
  foreach ($entities as $entity => $info) {
    $object_callback = "_token_example_get_{$entity}";
    if (function_exists($object_callback) && $objects = $object_callback()) {
      $form[$entity] = array(
        '#type' => 'select',
        '#title' => $info['label'],
        '#options' => array(0 => t('Not selected')) + $objects,
        '#default_value' => isset($form_state['storage'][$entity]) ? $form_state['storage'][$entity] : 0,
        '#access' => !empty($objects),
      );

      //在可用实体的基础上，建立一个被支持的Token类型列表
      if ($form[$entity]['#access']) {
        $token_types[$entity] = !empty($info['token type']) ? $info['token type'] : $entity;
      }
    }
  }

  $form['text'] = array(
    '#type' => 'textarea',
    '#title' => t('Enter your text here'),
    '#default_value' => '[current-user:name] 你好!',
  );

  // 展示Token替换后的文本。
  if (!empty($form_state['storage']['text'])) {
    $form['text']['#default_value'] = $form_state['storage']['text'];

    $data = array();
    foreach ($entities as $entity => $info) {
      if (!empty($form_state['storage'][$entity])) {
        $objects = entity_load($entity, array($form_state['storage'][$entity]));
        if ($objects) {
          $data[$token_types[$entity]] = reset($objects);
        }
      }
    }

    // 显示替换后文本
    $form['text_tokenized'] = array(
      '#type' => 'item',
      '#title' => t('Result'),
      '#markup' => token_replace($form_state['storage']['text'], $data),
    );
  }

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );

  if (module_exists('token')) {
    $form['token_tree'] = array(
      '#theme' => 'token_tree',
      '#token_types' => $token_types,
    );
  }
  else {
    $form['token_tree'] = array(
      '#markup' => '<p>' . t('Enable the <a href="@drupal-token">Token module</a> to view the available token browser.', array('@drupal-token' => 'http://drupal.org/project/token')) . '</p>',
    );
  }

  return $form;
}

/**
 * 提交和保存。
 */
function token_example_example_form_submit($form, &$form_state) {
  $form_state['storage'] = $form_state['values'];
  $form_state['rebuild'] = TRUE;
}

/**
 * 创建一个可用内容列表。
 */
function _token_example_get_node() {
  if (!user_access('access content') && !user_access('bypass node access')) {
    return array();
  }

  $node_query = db_select('node', 'n');
  $node_query->fields('n', array('nid', 'title'));
  $node_query->condition('n.status', NODE_PUBLISHED);
  $node_query->orderBy('n.created', 'DESC');
  $node_query->range(0, 10);
  $node_query->addTag('node_access');
  $nodes = $node_query->execute()->fetchAllKeyed();
  $nodes = array_map('check_plain', $nodes);
  return $nodes;
}

/**
 * 创建一个可用评论的列表。
 */
function _token_example_get_comment() {
  if (!module_exists('comment') || (!user_access('access comments') && !user_access('administer comments'))) {
    return array();
  }

  $comment_query = db_select('comment', 'c');
  $comment_query->innerJoin('node', 'n', 'n.nid = c.nid');
  $comment_query->fields('c', array('cid', 'subject'));
  $comment_query->condition('n.status', NODE_PUBLISHED);
  $comment_query->condition('c.status', COMMENT_PUBLISHED);
  $comment_query->orderBy('c.created', 'DESC');
  $comment_query->range(0, 10);
  $comment_query->addTag('node_access');
  $comments = $comment_query->execute()->fetchAllKeyed();
  $comments = array_map('check_plain', $comments);
  return $comments;
}

/**
 * 创建一个可用账号的列表。
 */
function _token_example_get_user() {
  if (!user_access('access user profiles') &&
      !user_access('administer users')) {
    return array();
  }

  $account_query = db_select('users', 'u');
  $account_query->fields('u', array('uid', 'name'));
  $account_query->condition('u.uid', 0, '>');
  $account_query->condition('u.status', 1);
  $account_query->range(0, 10);
  $accounts = $account_query->execute()->fetchAllKeyed();
  $accounts = array_map('check_plain', $accounts);
  return $accounts;
}

/**
 * 创建一个可用的分类词汇列表。
 */
function _token_example_get_taxonomy_term() {
  $term_query = db_select('taxonomy_term_data', 'ttd');
  $term_query->fields('ttd', array('tid', 'name'));
  $term_query->range(0, 10);
  $term_query->addTag('term_access');
  $terms = $term_query->execute()->fetchAllKeyed();
  $terms = array_map('check_plain', $terms);
  return $terms;
}

/**
 * 创建一个可用文件的列表
 */
function _token_example_get_file() {
  $file_query = db_select('file_managed', 'f');
  $file_query->fields('f', array('fid', 'filename'));
  $file_query->range(0, 10);
  $files = $file_query->execute()->fetchAllKeyed();
  $files = array_map('check_plain', $files);
  return $files;
}
/**
 * @} End of "defgroup token_example".
 */
