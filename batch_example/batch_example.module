<?php

/**
 * @file
 * Outlines how a module can use the Batch API.
 */

/**
 * @defgroup batch_example Example: Batch API
 * @ingroup examples
 * @{
 * 概述在模块中如何使用Batch API。
 *
 * Batch API允许把繁重的处理分散成为多个页面请求，用这种方式来避免因为PHP超时引起的处理
 * 过程中断，同时还给用户提供了操作进度的反馈。这同时也可以用于规避内存耗尽的风险。
 *
 *
 * batch_example.install文件还展示了使用Batch API来处理长时间运行的hook_update_N()
 * 函数。
 *
 * 这里定义了两个无害的批处理：
 * - 批处理1：载入nid最小的Node一千次。
 * - 批处理2：每批五个，载入所有Node 20次，并且使用进度反馈。
 *
 * @see batch
 */

/**
 * 实现 hook_menu().
 */
function batch_example_menu() {
  $items = array();
  $items['examples/batch_example'] = array(
    'title' => 'Batch example',
    'description' => 'Example of Drupal batch processing',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('batch_example_simple_form'),
    'access callback' => TRUE,
  );

  return $items;
}

/**
 * 建立一个Form，用来选择要运行的批处理。
 */
function batch_example_simple_form() {
  $form['description'] = array(
    '#type' => 'markup',
    '#markup' => t('This example offers two different batches. The first does 1000 identical operations, each completed in on run; the second does 20 operations, but each takes more than one run to operate if there are more than 5 nodes.'),
  );
  $form['batch'] = array(
    '#type' => 'select',
    '#title' => 'Choose batch',
    '#options' => array(
      'batch_1' => t('batch 1 - 1000 operations, each loading the same node'),
      'batch_2' => t('batch 2 - 20 operations. each one loads all nodes 5 at a time'),
    ),
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Go',
  );

  // 如果没有Node，不许提交。
  // 查看是否有Node用于处理，没有就无法运行。
  $nid = batch_example_lowest_nid();
  if (empty($nid)) {
    drupal_set_message(t("You don't currently have any nodes, and this example requires a node to work with. As a result, this form is disabled."));
    $form['submit']['#disabled'] = TRUE;
  }
  return $form;
}

/**
 * Form提交的处理。
 *
 * @param array $form
 *   Form API参数。
 * @param array $form_state
 *   Form API参数。
 */
function batch_example_simple_form_submit($form, &$form_state) {
  $function = 'batch_example_' . $form_state['values']['batch'];

  // 复位Debug信息计数器。
  $_SESSION['http_request_count'] = 0;

  // 执行名为 batch_example_1 和 batch_example_2的函数。
  $batch = $function();
  batch_set($batch);
}


/**
 * 定义第一个批处理: 载入Nid最小的Node 1000次。
 *
 * 这里用一个操作数组定义了第一个批处理的任务，其中也包含了处理之后应该执行的任务。在这里每次
 * 操作都是一样的，即使是被操作的$nid也是一样的。当然这只是例子，事实上我们可以在操作数组里
 * 使用不同类型的操作。
 *
 */
function batch_example_batch_1() {
  $nid = batch_example_lowest_nid();
  $num_operations = 1000;
  drupal_set_message(t('Creating an array of @num operations', array('@num' => $num_operations)));

  $operations = array();

  // 设置一个操作数组，其中包含了1000个元素，每个都是调用函数batch_example_op_1。
  // 数组中每个操作意味着至少一次新的HTTP请求，会导致Drupal运行来完成这一操作。如果一个操作
  // 返回的$context['finished'] != TRUE，他会被再次执行。在本例中，$context['finished']
  // 始终为True
  for ($i = 0; $i < $num_operations; $i++) {

    // 每个操作都是一个数组，包含如下元素：
    // - 要调用的函数。
    // - 函数的参数数组。
    $operations[] = array(
      'batch_example_op_1',
      array(
        $nid,
        t('(Operation @operation)', array('@operation' => $i)),
      ),
    );
  }
  $batch = array(
    'operations' => $operations,
    'finished' => 'batch_example_finished',
  );
  return $batch;
}

/**
 * 第一个批处理的处理函数：载入一个Node。
 *
 * 该函数会在这个批处理的每个操作中被调用。
 *
 * @param $nid
 * @param $operation_details
 * @param $context
 */
function batch_example_op_1($nid, $operation_details, &$context) {
  $node = node_load($nid, NULL, TRUE);

  // 处理完成后会调用一个'结束'回调。
  // 'result' 元素的内容会在'结束'函数中以$result的形式出现。
  // 本例中的结束回调是batch_example_finished()。
  $context['results'][] = $node->nid . ' : ' . check_plain($node->title);

  // 可选，
  $context['message'] = t('Loading node "@title"', array('@title' => $node->title)) . ' ' . $operation_details;

  _batch_example_update_http_requests();
}

/**
 * 第二个批处理：定义批处理，载入所有Node 20次。
 */
function batch_example_batch_2() {
  $num_operations = 20;

  // 提供信息，用于提示需要处理的Node数量。
  $node_count = db_query('SELECT COUNT(DISTINCT nid) FROM {node}')->fetchField();
  drupal_set_message(
    t('There are @node_count nodes so each of the @num operations will require @count HTTP requests.',
      array(
        '@node_count' => $node_count,
        '@num' => $num_operations,
        '@count' => ceil($node_count / 5),
      )
    )
  );

  $operations = array();
  // 20 个操作, 每个操作都载入所有Node。
  for ($i = 0; $i < $num_operations; $i++) {
    $operations[] = array(
      'batch_example_op_2',
      array(t('(Operation @operation)', array('@operation' => $i))),
    );
  }
  $batch = array(
    'operations' => $operations,
    'finished' => 'batch_example_finished',

    // 处理批量作业时候展示的信息。可用占位符包括：
    // @current, @remaining, @total, @percentage, @estimate以及@elapsed。
    // 这些占位符会在_batch_process()中被PHP函数strtr()替换为真正的值。
    // 这些值基于operations数组中的处理量运算得来，注意是操作数量不是Node数量。
    // 例如，前面说到是20个操作，所以@total是20，
    // 缺省值为t('Completed @current of @total.')。

    'title' => t('Processing batch 2'),
    'init_message' => t('Batch 2 is starting.'),
    'progress_message' => t('Processed @current out of @total.'),
    'error_message' => t('Batch 2 has encountered an error.'),
  );
  return $batch;
}

/**
 * 批处理2的操作函数：载入所有Node，五个一组
 * 每次处理完一组之后，就会返回给batch API，由其进行下一步操作。
 * @param $operation_details
 * @param $context
 */
function batch_example_op_2($operation_details, &$context) {
  // 使用$context['sandbox']，用来在调用之间传递信息。

  if (empty($context['sandbox'])) {
    $context['sandbox'] = array();
    $context['sandbox']['progress'] = 0;
    $context['sandbox']['current_node'] = 0;

    // 保存Node数量用于终端信息提示。
    $context['sandbox']['max'] = db_query('SELECT COUNT(DISTINCT nid) FROM {node}')->fetchField();
  }

  // 每五个一组处理Node。
  // 当一组Node处理之后，批更新引擎决定是否继续处理同一个请求，或者为用户提供一个反馈
  // 之后，等待下一个请求。
  //
  $limit = 5;

  // 获取下一组Nid。
  $result = db_select('node', 'n')
    ->fields('n', array('nid'))
    ->orderBy('n.nid', 'ASC')
    ->where('n.nid > :nid', array(':nid' => $context['sandbox']['current_node']))
    ->extend('PagerDefault')
    ->limit($limit)
    ->execute();
  foreach ($result as $row) {

    // 这里我们真正的执行了空壳处理函数来'处理'Node。
    $node = node_load($row->nid, NULL, TRUE);

    // 保存结果数据，提供给结束回调函数。
    // 'result' 的内容在结束函数中会成为$result，在这个例子中的结束回调是
    // batch_example_finished()。
    $context['results'][] = $node->nid . ' : ' . check_plain($node->title) . ' ' . $operation_details;

    // 更新进度信息。
    $context['sandbox']['progress']++;
    $context['sandbox']['current_node'] = $node->nid;
    $context['message'] = check_plain($node->title);
  }

  // 提醒批处理引擎，工作尚未结束。
  // 提供一个完成程度的预测。
  if ($context['sandbox']['progress'] != $context['sandbox']['max']) {
    $context['finished'] = ($context['sandbox']['progress'] >= $context['sandbox']['max']);
  }
  _batch_example_update_http_requests();
}

/**
 * 两个批处理共用的结束回调函数。
 * @param $success
 * @param $results
 * @param $operations
 */
function batch_example_finished($success, $results, $operations) {
  if ($success) {

    // 这里我们可以对结果做些有意义的事情。
    // 这里只是显示以下处理过的Node数。
    drupal_set_message(t('@count results processed in @requests HTTP requests.', array('@count' => count($results), '@requests' => _batch_example_get_http_requests())));
    drupal_set_message(t('The final result was "%final"', array('%final' => end($results))));
  }
  else {
    // 出错了。
    // $operations 包含了尚未处理的操作。

    $error_operation = reset($operations);
    drupal_set_message(
      t('An error occurred while processing @operation with arguments : @args',
        array(
          '@operation' => $error_operation[0],
          '@args' => print_r($error_operation[0], TRUE),
        )
      )
    );
  }
}

/**
 * 工具函数 - 查询和载入最小nid.
 *
 * @return int|NULL
 *   如果没有Node，返回NULL；否则返回nid。
 */
function batch_example_lowest_nid() {
  $select = db_select('node', 'n')
  ->fields('n', array('nid'))
  ->orderBy('n.nid', 'ASC')
  ->extend('PagerDefault')
  ->limit(1);
  $nid = $select->execute()->fetchField();
  return $nid;
}

/**
 * 工具函数：在Session中增长请求计数。
 */
function _batch_example_update_http_requests() {
  $_SESSION['http_request_count']++;
}

/**
 * 工具函数：返回Session变量中的HTTP请求数
 *
 * @return int
 *   请求数量
 */
function _batch_example_get_http_requests() {
  return !empty($_SESSION['http_request_count']) ? $_SESSION['http_request_count'] : 0;
}
/**
 * @} End of "defgroup batch_example".
 */
