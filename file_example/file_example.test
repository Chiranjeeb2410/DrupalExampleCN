<?php
/**
 * @file
 * 文件示例的测试用例。
 */

/**
 * 文件示例模块的功能测试。
 *
 * @ingroup file_example
 */
class FileExampleTest extends DrupalWebTestCase {

  protected $priviledgedUser;

  /**
   * {@inheritdoc}
   */
  public static function getInfo() {
    return array(
      'name' => 'File Example Functionality',
      'description' => 'Test File Example features and sample streamwrapper.',
      'group' => 'Examples',
    );
  }

  /**
   * {@inheritdoc}
   */
  public function setUp() {
    parent::setUp(array('file_example'));
    $this->priviledgedUser = $this->drupalCreateUser(array('use file example'));
    $this->drupalLogin($this->priviledgedUser);
  }

  /**
   * 测试基础的界面功能
   *
   * - 创建一个目录
   * - 对每一种模式分别进行三种操作。
   */
  public function testFileExampleBasic() {

    $expected_text = array(
      t('Write managed file') => t('Saved managed file'),
      t('Write unmanaged file') => t('Saved file as'),
      t('Unmanaged using PHP') => t('Saved file as'),
    );
    // 三个按钮分别是三种写入方法。
    $buttons = array(
      t('Write managed file'),
      t('Write unmanaged file'),
      t('Unmanaged using PHP'),
    );
    foreach ($buttons as $button) {
      // 除去 Drupal 自带的几个模式之外，还加入了 session:// 模式。
      $schemes = array('public', 'private', 'temporary', 'session');
      foreach ($schemes as $scheme) {
        // 创建一个目录
        $dirname = $scheme . '://' . $this->randomName(10);

        // 验证创建结果。
        $edit = array(
          'directory_name' => $dirname,
        );
        $this->drupalPost('examples/file_example/fileapi', $edit, t('Check to see if directory exists'));
        $this->assertRaw(t('Directory %dirname does not exist', array('%dirname' => $dirname)), 'Verify that directory does not exist.');

        $this->drupalPost('examples/file_example/fileapi', $edit, t('Create directory'));
        $this->assertRaw(t('Directory %dirname is ready for use', array('%dirname' => $dirname)));

        $this->drupalPost('examples/file_example/fileapi', $edit, t('Check to see if directory exists'));
        $this->assertRaw(t('Directory %dirname exists', array('%dirname' => $dirname)), 'Verify that directory now does exist.');

        // 在新目录中创建文件
        $content = $this->randomName(30);
        $filename = $dirname . '/' . $this->randomName(30) . '.txt';

        // 验证文件创建的结果。
        $edit = array(
          'fileops_file' => $filename,
        );
        $this->drupalPost('examples/file_example/fileapi', $edit, t('Check to see if file exists'));
        $this->assertRaw(t('The file %filename does not exist', array('%filename' => $filename)), 'Verify that file does not yet exist.');

        debug(
          t('Processing button=%button, scheme=%scheme, dir=%dirname, file=%filename',
            array(
              '%button' => $button,
              '%scheme' => $scheme,
              '%filename' => $filename,
              '%dirname' => $dirname,
            )
          )
        );
        $edit = array(
          'write_contents' => $content,
          'destination' => $filename,
        );
        $this->drupalPost('examples/file_example/fileapi', $edit, $button);
        $this->assertText($expected_text[$button]);

        // 因为文件可能被重新命名，因此要获取输出文件的名称。
        $element = $this->xpath('//span[@id="uri"]');
        $output_filename = (string) $element[0];
        debug($output_filename, 'Name of output file');

        // 点击链接是一个简单的方式来获取数据，检查是否跟我们输入的数据相符。
        if (!in_array($scheme, array('private', 'temporary'))) {
          $this->clickLink(t('this URL'));
          $this->assertText($content);
        }

        // 检查文件是否存在。
        $edit = array(
          'fileops_file' => $filename,
        );
        $this->drupalPost('examples/file_example/fileapi', $edit, t('Check to see if file exists'));
        $this->assertRaw(t('The file %filename exists', array('%filename' => $filename)), 'Verify that file now exists.');

        // 读取上面写入的文件，并检查是否能够使用写入工具。
        $edit = array(
          'fileops_file' => $output_filename,
        );
        $this->drupalPost('examples/file_example/fileapi', $edit, t('Read the file and store it locally'));

        $this->assertText(t('The file was read and copied'));

        $edit = array(
          'fileops_file' => $filename,
        );
        $this->drupalPost('examples/file_example/fileapi', $edit, t('Delete file'));
        $this->assertText(t('Successfully deleted'));
        $this->drupalPost('examples/file_example/fileapi', $edit, t('Check to see if file exists'));
        $this->assertRaw(t('The file %filename does not exist', array('%filename' => $filename)), 'Verify file has been deleted.');

        $edit = array(
          'directory_name' => $dirname,
        );
        $this->drupalPost('examples/file_example/fileapi', $edit, t('Delete directory'));
        $this->drupalPost('examples/file_example/fileapi', $edit, t('Check to see if directory exists'));
        $this->assertRaw(t('Directory %dirname does not exist', array('%dirname' => $dirname)), 'Verify that directory does not exist after deletion.');
      }
    }
  }
}
