<?php
/**
 * @file
 * 演示 Drupal 的文件 API，以及 Stream Wrappers。
 */

/**
 * @defgroup file_example Example: Files
 * @ingroup examples
 * @{
 * 演示 Drupal 的文件 API，以及 Stream Wrappers。
 *
 */

/**
 * Implements hook_menu().
 *
 * 为文件示例设置 URL 也就是 Menu 项。
 */
function file_example_menu() {
  $items = array();
  $items['examples/file_example'] = array(
    'title' => 'File Example',
    'page callback' => 'file_example_intro',
    'access callback' => TRUE,
    'expanded' => TRUE,
  );
  $items['examples/file_example/fileapi'] = array(
    'title' => 'Use File API to read/write a file',
    'page callback' => 'drupal_get_form',
    'access arguments' => array('use file example'),
    'page arguments' => array('file_example_readwrite'),
  );
  $items['examples/file_example/access_session'] = array(
    'page callback' => 'file_example_session_contents',
    'access arguments' => array('use file example'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}


/**
 * Implements hook_permission().
 */
function file_example_permission() {
  return array(
    'use file example' => array(
      'title' => t('Use the examples in the File Example module'),
    ),
  );
}

/**
 * 模块功能简介
 */
function file_example_intro() {
  $markup = t('The file example module provides a form and code to demonstrate the Drupal 7 file api. Experiment with the form, and then look at the submit handlers in the code to understand the file api.');
  return array('#markup' => $markup);
}
/**
 * 创建 Form
 *
 * 一个用于创建（受管理或非管理）文件的 Form。还能够读取/删除文件，以及创建目录。
 */
function file_example_readwrite($form, &$form_state) {
  if (empty($_SESSION['file_example_default_file'])) {
    $_SESSION['file_example_default_file'] = 'session://drupal.txt';
  }
  $default_file = $_SESSION['file_example_default_file'];
  if (empty($_SESSION['file_example_default_directory'])) {
    $_SESSION['file_example_default_directory'] = 'session://directory1';
  }
  $default_directory = $_SESSION['file_example_default_directory'];

  $form['write_file'] = array(
    '#type' => 'fieldset',
    '#title' => t('Write to a file'),
  );
  $form['write_file']['write_contents'] = array(
    '#type' => 'textfield',
    '#title' => t('Enter something you would like to write to a file') . ' ' . date('m'),
    '#default_value' => t('Put some text here or just use this text'),
  );

  $form['write_file']['destination'] = array(
    '#type' => 'textfield',
    '#default_value' => $default_file,
    '#title' => t('Optional: Enter the streamwrapper saying where it should be written'),
    '#description' => t('This may be public://some_dir/test_file.txt or private://another_dir/some_file.txt, for example. If you include a directory, it must already exist. The default is "public://". Since this example supports session://, you can also use something like session://somefile.txt.'),
  );

  $form['write_file']['managed_submit'] = array(
    '#type' => 'submit',
    '#value' => t('Write managed file'),
    '#submit' => array('file_example_managed_write_submit'),
  );
  $form['write_file']['unmanaged_submit'] = array(
    '#type' => 'submit',
    '#value' => t('Write unmanaged file'),
    '#submit' => array('file_example_unmanaged_write_submit'),
  );
  $form['write_file']['unmanaged_php'] = array(
    '#type' => 'submit',
    '#value' => t('Unmanaged using PHP'),
    '#submit' => array('file_example_unmanaged_php_submit'),
  );

  $form['fileops'] = array(
    '#type' => 'fieldset',
    '#title' => t('Read from a file'),
  );
  $form['fileops']['fileops_file'] = array(
    '#type' => 'textfield',
    '#default_value' => $default_file,
    '#title' => t('Enter the URI of a file'),
    '#description' => t('This must be a stream-type description like public://some_file.txt or http://drupal.org or private://another_file.txt or (for this example) session://yet_another_file.txt.'),
  );
  $form['fileops']['read_submit'] = array(
    '#type' => 'submit',
    '#value' => t('Read the file and store it locally'),
    '#submit' => array('file_example_read_submit'),
  );
  $form['fileops']['delete_submit'] = array(
    '#type' => 'submit',
    '#value' => t('Delete file'),
    '#submit' => array('file_example_delete_submit'),
  );
  $form['fileops']['check_submit'] = array(
    '#type' => 'submit',
    '#value' => t('Check to see if file exists'),
    '#submit' => array('file_example_file_check_exists_submit'),
  );

  $form['directory'] = array(
    '#type' => 'fieldset',
    '#title' => t('Create or prepare a directory'),
  );

  $form['directory']['directory_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Directory to create/prepare/delete'),
    '#default_value' => $default_directory,
    '#description' => t('This is a directory as in public://some/directory or private://another/dir.'),
  );
  $form['directory']['create_directory'] = array(
    '#type' => 'submit',
    '#value' => t('Create directory'),
    '#submit' => array('file_example_create_directory_submit'),
  );
  $form['directory']['delete_directory'] = array(
    '#type' => 'submit',
    '#value' => t('Delete directory'),
    '#submit' => array('file_example_delete_directory_submit'),
  );
  $form['directory']['check_directory'] = array(
    '#type' => 'submit',
    '#value' => t('Check to see if directory exists'),
    '#submit' => array('file_example_check_directory_submit'),
  );

  $form['debug'] = array(
    '#type' => 'fieldset',
    '#title' => t('Debugging'),
  );
  $form['debug']['show_raw_session'] = array(
    '#type' => 'submit',
    '#value' => t('Show raw $_SESSION contents'),
    '#submit' => array('file_example_show_session_contents_submit'),
  );

  return $form;
}

/**
 * 写入受管理文件的 Form 提交处理
 *
 * 这里使用的关键函数：
 * - file_save_data()，该函数申请一个缓冲区并保存其中的数据到一个文件中，同时在数据库
 *   创建一条跟踪记录，并返回一个文件对象。这个函数中我们使用缺省的 FILE_EXISTS_RENAME
 *   作为参数，这意味着如果文件已经存在，就会使用一个新的文件名。
 * - file_create_url(), 从 Drupal URI 例如 public://junk.txt 或者
 *   private://something/test.txt 转换成为一个形如
 *   http://example.com/sites/default/files/junk.txt 网址。
 */
function file_example_managed_write_submit($form, &$form_state) {
  $data = $form_state['values']['write_contents'];
  $uri = !empty($form_state['values']['destination']) ? $form_state['values']['destination'] : NULL;

  // 文件对象的受管理操作。
  $file_object = file_save_data($data, $uri, FILE_EXISTS_RENAME);
  if (!empty($file_object)) {
    $url = file_create_url($file_object->uri);
    $_SESSION['file_example_default_file'] = $file_object->uri;
    drupal_set_message(
      t('Saved managed file: %file to destination %destination (accessible via !url, actual uri=<span id="uri">@uri</span>)',
        array(
          '%file' => print_r($file_object, TRUE),
          '%destination' => $uri, '@uri' => $file_object->uri,
          '!url' => l(t('this URL'), $url),
        )
      )
    );
  }
  else {
    drupal_set_message(t('Failed to save the managed file'), 'error');
  }
}

/**
 * 写入非管理文件的提交处理
 *
 * 这里使用的关键函数：
 * - file_unmanaged_save_data(), 这里也是利用缓冲区保存到一个文件，但是不同的是不会进行
 *   数据库记录。这个函数中我们使用缺省的 FILE_EXISTS_RENAME作为参数，这意味着如果文件已
 *   经存在，就会使用一个新的文件名。
 * - file_create_url(), 从 Drupal URI 例如 public://junk.txt 或者
 *   private://something/test.txt 转换成为一个形如
 *   http://example.com/sites/default/files/junk.txt 网址。
 */
function file_example_unmanaged_write_submit($form, &$form_state) {
  $data = $form_state['values']['write_contents'];
  $destination = !empty($form_state['values']['destination']) ? $form_state['values']['destination'] : NULL;

  // 对于非管理文件，我们只返回文件名。
  $filename = file_unmanaged_save_data($data, $destination, FILE_EXISTS_REPLACE);
  if ($filename) {
    $url = file_create_url($filename);
    $_SESSION['file_example_default_file'] = $filename;
    drupal_set_message(
      t('Saved file as %filename (accessible via !url, uri=<span id="uri">@uri</span>)',
        array(
          '%filename' => $filename,
          '@uri' => $filename,
          '!url' => l(t('this URL'), $url),
        )
      )
    );
  }
  else {
    drupal_set_message(t('Failed to save the file'), 'error');
  }
}

/**
 * 利用 PHP 原生函数生成非管理文件的提交处理。
 * 这里使用的关键函数：
 * - file_create_url(), 从 Drupal URI 例如 public://junk.txt 或者
 *   private://something/test.txt 转换成为一个形如
 *   http://example.com/sites/default/files/junk.txt 网址。
 * - drupal_tempnam() 生成一个临时文件名。
 */
function file_example_unmanaged_php_submit($form, &$form_state) {
  $data = $form_state['values']['write_contents'];
  $destination = !empty($form_state['values']['destination']) ? $form_state['values']['destination'] : NULL;

  if (empty($destination)) {
    // 如果没有提供目标，则生成一个临时名称。
    $destination = drupal_tempnam('public://', 'file');
  }

  // 利用原生 PHP 函数生成文件。
  $fp = fopen($destination, 'w');

  // 这个例子展示了流操作，我们会以五个字节为单位来逐次写入文件。
  // 当然我么还可以用一行语句来完成这个任务： fwrite($fp, $data)
  $length = strlen($data);
  $write_size = 5;
  for ($i = 0; $i < $length; $i += $write_size) {
    $result = fwrite($fp, substr($data, $i, $write_size));
    if ($result === FALSE) {
      drupal_set_message(t('Failed writing to the file %file', array('%file' => $destination)), 'error');
      fclose($fp);
      return;
    }
  }
  $url = file_create_url($destination);
  $_SESSION['file_example_default_file'] = $destination;
  drupal_set_message(
    t('Saved file as %filename (accessible via !url, uri=<span id="uri">@uri</span>)',
      array(
        '%filename' => $destination,
        '@uri' => $destination,
        '!url' => l(t('this URL'), $url),
      )
    )
  );
}

/**
 * 读取 Stream Wrapper (流封装？)的提交处理。
 *
 * Drupal 为 PHP 的 Stream Wrapper 提供了全面的支持，这意味着，相对于旧式的文件函数
 * （$fp = fopen("/tmp/some_file.txt");），可以以可扩展的方式支持更多更通用的文件之外
 * 的内容的操作。 Drupal 提供了 public:// 和 private:// 两种模式，用于处理公有和私有
 * 文件。 PHP 提供了 file://（缺省）和 http:// 两个模式，所以 URL 可以像文件一样被读或
 * 或写 (POST) 。另外下面的例子还会讲到如何定制新的模式。
 * Here we take the stream wrapper provided in the form. We grab the
 * contents with file_get_contents(). Notice that's it's as simple as that:
 * file_get_contents("http://example.com") or
 * 这里我们要处理的是 Form 提供的 Stream Wrapper。我们利用 file_get_contents() 进行读
 * 取。这个操作很简单，例如 file_get_contents("http://example.com") 或者
 * file_get_contents("public://somefile.txt")。我们用 file_unmanaged_save_data()
 * 来把文件保存到本地，然后使用 file_create_url() 来生成一个 URL。
 */
function file_example_read_submit($form, &$form_state) {
  $uri = $form_state['values']['fileops_file'];

  if (!is_file($uri)) {
    drupal_set_message(t('The file %uri does not exist', array('%uri' => $uri)), 'error');
    return;
  }

  // 从 Stream Wrapper 名字中除掉非法字符，用来生成一个文件名进行保存。
  // 如果擴展名不合规，会被 file_munge_filename() 函数修改。


  $filename = file_munge_filename(preg_replace('@^.*/@', '', $uri), '', TRUE);
  $buffer = file_get_contents($uri);

  if ($buffer) {
    $sourcename = file_unmanaged_save_data($buffer, 'public://' . $filename);
    if ($sourcename) {
      $url = file_create_url($sourcename);
      $_SESSION['file_example_default_file'] = $sourcename;
      drupal_set_message(
        t('The file was read and copied to %filename which is accessible at !url',
          array(
            '%filename' => $sourcename,
            '!url' => l($url, $url),
          )
        )
      );
    }
    else {
      drupal_set_message(t('Failed to save the file'));
    }
  }
  else {
    // 内容获取失败。
    drupal_set_message(t('Failed to retrieve the file %file', array('%file' => $uri)));
  }
}

/**
 * 删除文件的提交处理
 */
function file_example_delete_submit($form, &$form_state) {

  $uri = $form_state['values']['fileops_file'];

  // 对数据库进行查询来判断文件是否受管理。
  // 一般来说只会为一种文件工作，这种做法并不常见。
  $file_object = file_example_get_managed_file($uri);

  // 对受管文件使用 file_delete()。
  if (!empty($file_object)) {
    $result = file_delete($file_object);
    if ($result !== TRUE) {
      drupal_set_message(t('Failed deleting managed file %uri. Result was %result',
        array(
          '%uri' => $uri,
          '%result' => print_r($result, TRUE),
        )
      ), 'error');
    }
    else {
      drupal_set_message(t('Successfully deleted managed file %uri', array('%uri' => $uri)));
      $_SESSION['file_example_default_file'] = $uri;
    }
  }
  // 否则使用 file_unmanaged_delete().
  else {
    $result = file_unmanaged_delete($uri);
    if ($result !== TRUE) {
      drupal_set_message(t('Failed deleting unmanaged file %uri', array('%uri' => $uri, 'error')));
    }
    else {
      drupal_set_message(t('Successfully deleted unmanaged file %uri', array('%uri' => $uri)));
      $_SESSION['file_example_default_file'] = $uri;
    }
  }
}

/**
 * 检查文件是否存在的提交处理。
 */
function file_example_file_check_exists_submit($form, &$form_state) {
  $uri = $form_state['values']['fileops_file'];
  if (is_file($uri)) {
    drupal_set_message(t('The file %uri exists.', array('%uri' => $uri)));
  }
  else {
    drupal_set_message(t('The file %uri does not exist.', array('%uri' => $uri)));
  }

}
/**
 * 创建目录的提交处理。
 *
 * 使用 file_prepare_directory() 创建一个目录，并设置权限。
 */
function file_example_create_directory_submit($form, &$form_state) {
  $directory = $form_state['values']['directory_name'];

  // FILE_MODIFY_PERMISSIONS 缺省设置目录权限为 0755，也可以通过
  // file_chmod_directory 来改变这一缺省值。
  if (!file_prepare_directory($directory, FILE_MODIFY_PERMISSIONS | FILE_CREATE_DIRECTORY)) {
    drupal_set_message(t('Failed to create %directory.', array('%directory' => $directory)), 'error');
  }
  else {
    $result = is_dir($directory);
    drupal_set_message(t('Directory %directory is ready for use.', array('%directory' => $directory)));
    $_SESSION['file_example_default_directory'] = $directory;
  }
}

/**
 * 删除目录的提交处理。
 *
 * @see file_unmanaged_delete_recursive()
 */
function file_example_delete_directory_submit($form, &$form_state) {
  $directory = $form_state['values']['directory_name'];

  $result = file_unmanaged_delete_recursive($directory);
  if (!$result) {
    drupal_set_message(t('Failed to delete %directory.', array('%directory' => $directory)), 'error');
  }
  else {
    drupal_set_message(t('Recursively deleted directory %directory.', array('%directory' => $directory)));
    $_SESSION['file_example_default_directory'] = $directory;
  }
}

/**
 * 检查目录是否存在的提交处理。
 *
 * 这个实际是测试一个目录是否可写
 *
 * @param array $form
 *   FormAPI form.
 * @param array $form_state
 *   FormAPI form state.
 */
function file_example_check_directory_submit($form, &$form_state) {
  $directory = $form_state['values']['directory_name'];
  $result = is_dir($directory);
  if (!$result) {
    drupal_set_message(t('Directory %directory does not exist.', array('%directory' => $directory)));
  }
  else {
    drupal_set_message(t('Directory %directory exists.', array('%directory' => $directory)));
  }
}

/**
 * 用于显示 $_SESSION 的工具函数。
 */
function file_example_show_session_contents_submit($form, &$form_state) {
  // If the devel module is installed, use it's nicer message format.
  if (module_exists('devel')) {
    dsm($_SESSION['file_example'], t('Entire $_SESSION["file_example"]'));
  }
  else {
    drupal_set_message('<pre>' . print_r($_SESSION['file_example'], TRUE) . '</pre>');
  }
}

/**
 * 用于检查和返回一个受管理文件的工具函数。
 *
 * 这段代码用于检查一个 URI 是否受管文件。
 *
 * @param string $uri
 *   public://test.txt 格式的文件 URI。
 */
function file_example_get_managed_file($uri) {
  $fid = db_query('SELECT fid FROM {file_managed} WHERE uri = :uri', array(':uri' => $uri))->fetchField();
  if (!empty($fid)) {
    $file_object = file_load($fid);
    return $file_object;
  }
  return FALSE;
}

/**
 * Implements hook_stream_wrappers().
 *
 * hook_stream_wrappers() 用于提供一个类给 PHP， PHP 会用他来产生一个新的 Stream
 * Wrapper 类。这里我们声明了一个 Session 模式，也就是利用
 * "session://example/example.txt" 格式的 URI 来读写 $_SESSION 变量中的内容。
 * @see FileExampleSessionStreamWrapper
 */
function file_example_stream_wrappers() {
  $wrappers = array(
    'session' => array(
      'name' => t('Example: $_SESSION variable storage'),
      'class' => 'FileExampleSessionStreamWrapper',
      'description' => t('Store files in the $_SESSION variable as an example.'),
    ),
  );
  return $wrappers;
}

/**
 * 展示 Session 中的内容
 *
 * 这个页面回调函数会被 Menu API 以 examples/file_example/access_session 为入口进行
 * 调用。其余的路径元素会被认作 Session 路径。比如说
 * examples/file_example/access_session/foo/bar.txt 会访问 session://foo/bar.txt，
 * 会映射为 Session 中的键：$_SESSION['foo']['bar.txt']

 * Menu API 会把路径中的附加部分转换为函数参数，可以参考 func_get_args()。
 * @return string
 *   从 Session 中获取到的指定内容。
 *
 * @see file_get_contents()
 */
function file_example_session_contents() {
  $path_components = func_get_args();
  $session_path = 'session://' . implode('/', $path_components);
  $content = file_get_contents($session_path);
  if ($content !== FALSE) {
    return t('Contents of @path :',
      array('@path' => check_plain($session_path))) . ' ' .
      print_r($content, TRUE);
  }
  return t('Unable to load contents of: @path',
    array('@path' => check_plain($session_path)));
}

/**
 * @} End of "defgroup file_example".
 */
