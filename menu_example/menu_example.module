<?php

/**
 * @file
 * Module file for menu_example.
 */

/**
 * @defgroup menu_example Example: Menu
 * @ingroup examples
 * @{
 *
 * 演示Drupal中的Menu API
 *
 * 这个示例模块讲解了菜单系统，并演示了使用菜单参数生成页面的过程。
 *
 * @see hook_menu()
 * @see hook_menu_alter()
 * @see hook_menu_link_alter()
 * @see page_example
 * @see page_example_menu()
 */

/**
 * Implements hook_menu().
 *
 * 一个简单的例子，定义了一个页面回调以及一个菜单入口。
 */
function menu_example_menu() {

  // 菜单项的定义是通过$item数组完成的。这个数组的键 (本例中是menu_example)是菜单路由的入口.
  // 所以这个页面可以用URL：example.com/examples/menu_example来访问。

  $items['examples/menu_example'] = array(

    // 'type' => MENU_NORMAL_ITEM,
    // 我们使用的是缺省的菜单类型，所以可以省略。

    // 菜单标题。因为缺省就会调用t()函数，所以此处不需要使用这一函数。
    // 也可以定义一个 'title callback' 来覆盖对t()函数的缺省调用。
    // 下面的 'menu_example/title_callbacks' 例子讲解了这一用法。
    'title' => 'Menu Example',

    // 描述 (鼠标悬停时显示)。不要使用t()，这里也是自动调用的。
    'description' => 'Simplest possible menu type, and the parent menu entry for others',

    // 访问这一路径时，被调用的函数。
    'page callback' => '_menu_example_basic_instructions',

    // 页面回调函数的参数。这里我们只用来为我们的页面提供内容。
    'page arguments' => array(t('This page is displayed by the simplest (and base) menu example. Note that the title of the page is the same as the link title. You can also <a href="!link">visit a similar page with no menu link</a>. Also, note that there is a hook_menu_alter() example that has changed the path of one of the menu items.', array('!link' => url('examples/menu_example/path_only')))),


    // 如果想要这一页面被所有用户访问，可以设置 'access callback' 为 TRUE。这种设置会忽略所有的访问检查。
    // 如果希望了解权限系统如何限制指定用户的访问，可以参考下面的 'examples/menu_example/permissioned/controlled'。
    'access callback' => TRUE,

    //
    // 如果一个页面回调的定义是在其他文件中，这里就可以进行声明，菜单系统会根据这一取值载入相关文件。
    // 'file' => 'menu_example.module',
    //
    // 我们可以选择这一链接所处的菜单，缺省为 'navigation'（导航）。

    // 以展开的形式显示这一菜单链接。
    'expanded' => TRUE,
  );


  // 这里示范如何把一个链接放在缺省的导航菜单之外。
  // 前提是这一菜单已经存在。
  $items['examples/menu_example_alternate_menu'] = array(
    'title' => 'Menu Example: Menu in alternate menu',

    // 目标菜单的机读名称。
    'menu_name' => 'primary-links',

    'page callback' => '_menu_example_menu_page',
    'page arguments' => array(t('This will be in the Primary Links menu instead of the default Navigation menu')),
    'access callback' => TRUE,
  );

  // 一个带有user_access()访问控制的菜单项。
  // 首先提供一个菜单项，其中提示了下面会有带权限的菜单。

  $items['examples/menu_example/permissioned'] = array(
    'title' => 'Permissioned Example',
    'page callback' => '_menu_example_menu_page',
    'page arguments' => array(t('A menu item that requires the "access protected menu example" permission is at <a href="!link">examples/menu_example/permissioned/controlled</a>', array('!link' => url('examples/menu_example/permissioned/controlled')))),
    'access callback' => TRUE,
    'expanded' => TRUE,
  );

  // 这里是真正的受权限控制的菜单项。
  $items['examples/menu_example/permissioned/controlled'] = array(

    // 标题 - 自动调用 t()， 所以无需显式调用。
    'title' => 'Permissioned Menu Item',
    'description' => 'This menu entry will not appear and the page will not be accessible without the "access protected menu example" permission.',
    'page callback' => '_menu_example_menu_page',
    'page arguments' => array(t('This menu entry will not show and the page will not be accessible without the "access protected menu example" permission.')),


    // 这是一个有权限控制的菜单项，这里我们要提供一个 'access callback' 来确定当前用户是否可以访问。
    // 缺省情况下会使用 user_access()，这里我们就是用缺省值，因此无需输入 'access callback' => 'user_access',

    // 'access arguments' 传递给 'access callback' 的参数，我们需要用这个参数传递一个权限给 user_access函数。
    'access arguments' => array('access protected menu example'),

    // 权重元素用于表达菜单项的排序，数字越大，排序越后。
    'weight' => 10,
  );

  /*
   * 我们可以定义自己的 'access callback' 函数。这里我们实现一个 menu_example_custom_access()来替换user_access()。
   *
   * 这个函数使用 'role' （用户角色）为参数
   */
  $items['examples/menu_example/custom_access'] = array(
    'title' => 'Custom Access Example',
    'page callback' => '_menu_example_menu_page',
    'page arguments' => array(t('A menu item that requires the user to posess a role of "authenticated user" is at <a href="!link">examples/menu_example/custom_access/page</a>', array('!link' => url('examples/menu_example/custom_access/page')))),
    'access callback' => TRUE,
    'expanded' => TRUE,
    'weight' => -5,
  );

  $items['examples/menu_example/custom_access/page'] = array(
    'title' => 'Custom Access Menu Item',
    'description' => 'This menu entry will not show and the page will not be accessible without the user being an "authenticated user".',
    'page callback' => '_menu_example_menu_page',
    'page arguments' => array(t('This menu entry will not be visible and access will result in a 403 error unless the user has the "authenticated user" role. This is accomplished with a custom access callback.')),
    'access callback' => 'menu_example_custom_access',
    'access arguments' => array('authenticated user'),
  );

  //
  // 一个没有提供菜单链接的菜单项。这种情况用于我们不希望用户看到链接的情况。其他方面则跟
  // 上面的 'simpletest' 项类似。 MENU_CALLBACK 类型就是用于提供隐藏的菜单项，例如服务和
  // 一些不希望被直接访问的地址。

  // 首先，提供一个友好的连接，让用户能够看到
  $items['examples/menu_example/path_only'] = array(
    'title' => 'MENU_CALLBACK example',
    'page callback' => '_menu_example_menu_page',
    'page arguments' => array(t('A menu entry with no menu link (MENU_CALLBACK) is at <a href="!link">!link</a>', array('!link' => url('examples/menu_example/path_only/callback')))),
    'access callback' => TRUE,
    'weight' => 20,
  );
  $items['examples/menu_example/path_only/callback'] = array(


    // MENU_CALLBACK 意味着这个不会出现菜单链接。
    'type' => MENU_CALLBACK,

    // The title is still used for the page title, even though it's not used
    // for the menu link text, since there's no menu link.
    // 因为没有了菜单连接，所以 title 不作为菜单链接文字出现了，但是还会用作页面标题。
    'title' => 'Callback Only',

    'page callback' => '_menu_example_menu_page',
    'page arguments' => array(t('The menu entry for this page is of type MENU_CALLBACK, so it provides only a path but not a link in the menu links, but it is the same in every other way to the simplest example.')),
    'access callback' => TRUE,
  );


  // 一个带tab的菜单项。
  // 要使用tab要具备三个条件。
  // 1) 一个MENU_NORMAL_ITEM类型的父菜单项。(本例中是examples/menu_example/tabs)
  // 2) 一个缺省Tab (当我们打开跟菜单时的显示)，这个TAB的类型是MENU_DEFAULT_LOCAL_TASK。
  // 3) 其他Tab的其他菜单项，类型是MENU_LOCAL_TASK。
  $items['examples/menu_example/tabs'] = array(
    // 'type' => MENU_NORMAL_ITEM,  // 缺省内容，所以不需要了
    'title' => 'Tabs',
    'description' => 'Shows how to create primary and secondary tabs',
    'page callback' => '_menu_example_menu_page',
    'page arguments' => array(t('This is the "tabs" menu entry.')),
    'access callback' => TRUE,
    'weight' => 30,
  );


  // 这种类型只许很少的配置。这是因为回调和其他的条件都是由父回调处理的。
  $items['examples/menu_example/tabs/default'] = array(
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'title' => 'Default primary tab',
    'weight' => 1,
  );
  // 其他的Tab项
  foreach (array(t('second') => 2, t('third') => 3, t('fourth') => 4) as $tabname => $weight) {
    $items["examples/menu_example/tabs/$tabname"] = array(
      'type' => MENU_LOCAL_TASK,
      'title' => $tabname,
      'page callback' => '_menu_example_menu_page',
      'page arguments' => array(t('This is the tab "@tabname" in the "basic tabs" example', array('@tabname' => $tabname))),
      'access callback' => TRUE,

      // 权重属性覆盖了缺省的字母排序，让我们可以按需排列。
      'weight' => $weight,
    );
  }


  // 最后，我们会加入第二个Tab
  $items['examples/menu_example/tabs/default/first'] = array(
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'title' => 'Default secondary tab',
  );
  foreach (array(t('second'), t('third')) as $tabname) {
    $items["examples/menu_example/tabs/default/$tabname"] = array(
      'type' => MENU_LOCAL_TASK,
      'title' => $tabname,
      'page callback' => '_menu_example_menu_page',
      'page arguments' => array(t('This is the secondary tab "@tabname" in the "basic tabs" example "default" tab', array('@tabname' => $tabname))),
      'access callback' => TRUE,
    );
  }


  // 一个URL，去除基础菜单路径之外的所有部分，都会作为多个参数被传递给页面回调，我们的
  // _menu_example_menu_page() 函数就会获取这些参数并进行输出。
  $items['examples/menu_example/use_url_arguments'] = array(
    'title' => 'Extra Arguments',
    'description' => 'The page callback can use the arguments provided after the path used as key',
    'page callback' => '_menu_example_menu_page',
    'page arguments' => array(
      t(
        'This page demonstrates using arguments in the path (portions of the path after "menu_example/url_arguments". For example, access it with <a href="!link1">!link1</a> or <a href="!link2">!link2</a>).',
        array(
          '!link1' => url('examples/menu_example/use_url_arguments/one/two'),
          '!link2' => url('examples/menu_example/use_url_arguments/firstarg/secondarg')
        )
      )
    ),
    'access callback' => TRUE,
    'weight' => 40,
  );


  // 菜单标题可以用 'title callback' 定义的回调函数来动态产生，这个回调的缺省值是t()。
  // 这里我们做了一个新的回调，根据用户的用户名来显示标题。

  $items['examples/menu_example/title_callbacks'] = array(
    'title callback' => '_menu_example_simple_title_callback',
    'title arguments' => array(t('Dynamic title: username=')),
    'description' => 'The title of this menu item is dynamically generated',
    'page callback' => '_menu_example_menu_page',
    'page arguments' => array(t('The menu title is dynamically changed by the title callback')),
    'access callback' => TRUE,
    'weight' => 50,
  );

  // 有时我们要在菜单URL中获取某个指定的参数。比如我们想在URL
  // 'example/menu_example/placeholder_argument/3333/display' 中获取 '3333'这一段。这里
  // 我们可以在菜单定义中使用一个占位符。
  // 这里用了一种（奇葩的）方式来定义传递给回调函数的参数：用一个位置编号的数组来定义函数参数的传递。
  // 位置编号从0开始，代表了URL的第X段字符串。
  //
  // 首先我们提供一个友好的连接，告知用户如何访问这个带占位符的菜单项。
  $items['examples/menu_example/placeholder_argument'] = array(
    'title' => 'Placeholder Arguments',
    'page callback' => '_menu_example_menu_page',
    'page arguments' => array(t('Demonstrate placeholders by visiting <a href="!link">examples/menu_example/placeholder_argument/3343/display</a>', array('!link' => url('examples/menu_example/placeholder_argument/3343/display')))),
    'access callback' => TRUE,
    'weight' => 60,
  );

  // 真正的入口
  $items['examples/menu_example/placeholder_argument/%/display'] = array(
    'title' => 'Placeholder Arguments',
    'page callback' => '_menu_example_menu_page',

    // '%'的位置编号是3（以0开始的位置编号的第四个），也就是把这个%的值传给 'page callback'。
    // 如果网址是 'examples/menu_example/placeholder_argument/333/display'，那么传递给
    // 'page callback' 的参数的就是333。
    'page arguments' => array(3),
    'access callback' => TRUE,
  );


  // Drupal进一步提供了更高级的用法，如果一个占位符是 '%menu_example_arg_optional' ，
  // 那么会调用函数menu_example_arg_optional_load($arg)，来对路径参数进行翻译。
  // $arg参数就是占位符的值。接下来这个函数的返回值，就会传递给 'page callback'。
  // 另外，如果存在menu_example_arg_optional_to_arg()，那么这一函数的返回值会替换掉
  // 网址中的的这一占位符.

  $items['examples/menu_example/default_arg/%menu_example_arg_optional'] = array(
    'title' => 'Processed Placeholder Arguments',
    'page callback' => '_menu_example_menu_page',
    // Argument 3 (4rd arg) is the one we want.
    'page arguments' => array(3),
    'access callback' => TRUE,
    'weight' => 70,
  );

  $items['examples/menu_example/menu_original_path'] = array(
    'title' => 'Menu path that will be altered by hook_menu_alter()',
    'page callback' => '_menu_example_menu_page',
    'page arguments' => array(t('This menu item was created strictly to allow the hook_menu_alter() function to have something to operate on. hook_menu defined the path as examples/menu_example/menu_original_path. The hook_menu_alter() changes it to examples/menu_example/menu_altered_path. You can try navigating to both paths and see what happens!')),
    'access callback' => TRUE,
    'weight' => 80,
  );
  return $items;
}

/**
 * 最简单的菜单入口的 Page Callback
 *
 * @param string $content
 *    传入的内容
 * @return string
 */
function _menu_example_basic_instructions($content = NULL) {
  $base_content = t(
    'This is the base page of the Menu Example. There are a number of examples
  here, from the most basic (like this one) to extravagant mappings of loaded
  placeholder arguments. Enjoy!');
  return '<div>' . $base_content . '</div><br /><div>' . $content . '</div>';
}

/**
 * Page callback for use with most of the menu entries.
 *
 * 本例中多数菜单入口的Page Callback
 *
 * 输入参数决定了输出内容（屁话）。
 *
 * @param string $content
 *   待输出的基本内容。
 * @param string $arg1
 *   来自于路径的第一个附加参数。
 * @param string $arg2
 *   第二个附加参数。
 * @return string
 */
function _menu_example_menu_page($content = NULL, $arg1 = NULL, $arg2 = NULL) {
//  $content =       t(
//    'This page demonstrates using arguments in the path (portions of the path after "menu_example/url_arguments". For example, access it with <a href="!link1">!link1</a> or <a href="!link2">!link2</a>).',
//    array(
//      '!link1' => url('examples/menu_example/use_url_arguments/one/two'),
//      '!link2' => url('examples/menu_example/use_url_arguments/firstarg/secondarg')
//    )
//  );
  $output = '<div>' . $content . '</div>';

  if (!empty($arg1)) {
    $output .= '<div>' . t('Argument 1=%arg', array('%arg' => $arg1)) . '</div>';
  }
  if (!empty($arg2)) {
    $output .= '<div>' . t('Argument 2=%arg', array('%arg' => $arg2)) . '</div>';
  }
  return $output;
}

/**
 * Implements hook_permission().
 *
 * 提供演示权限。
 */
function menu_example_permission() {
  return array(
    'access protected menu example' => array(
      'title' => t('Access the protected menu example'),
    ),
  );

}

/**
 * 确定当前用户是否具备指定角色。
 *
 * @param string $role_name
 *    要求的角色。
 *
 * @return bool
 *   如果当前用户具备该角色，则返回真。
 */
function menu_example_custom_access($role_name) {
  $access_granted = in_array($role_name, $GLOBALS['user']->roles);
  return $access_granted;
}

/**
 * 工具函数，用来提供从整数到一些字符串的映射。
 *
 * 一般是一些数据库查询：根据键获取对象或者数组内容。
 *
 * @param int $id
 *   整数键。
 *
 * @return string
 *   对应的字符串，如果没有对应的串，返回空。
 */
function _menu_example_mappings($id) {
  $mapped_value = NULL;
  static $mappings = array(
    1 => 'one',
    2 => 'two',
    3 => 'three',
    99 => 'jackpot! default',
  );
  if (isset($mappings[$id])) {
    $mapped_value = $mappings[$id];
  }
  return $mapped_value;
}

/**
 * menu_example 中的特别的 _load 函数。
 *
 * 提供一个整数的 $id，获取到相关的字符串。
 * 正常情况下这个载入函数会返回一个对象或者数组，用于承载更多信息。
 *
 * @param int $id
 *   整数ID
 *
 * @return string
 *   根据ID获取到的字符串。
 */
function menu_example_id_load($id) {

  // 只是个例子，映射到一个魔术值。通常情况下会从数据库和上下文载入一些更复杂的对象。
  $mapped_value = _menu_example_mappings($id);
  if (!empty($mapped_value)) {
    return t('Loaded value was %loaded', array('%loaded' => $mapped_value));
  } else {
    return t('Sorry, the id %id was not found to be loaded', array('%id' => $id));
  }
}

/**
 * Implements hook_menu_alter().
 *
 * 把 'examples/menu_example/menu_original_path' 变更为
 * 'examples/menu_example/menu_altered_path'，
 * 并修改菜单项 'user/UID' 的 title callback。
 *
 * 把 'examples/menu_example/menu_original_path' 变更为
 * 'examples/menu_example/menu_altered_path'。
 * 这一变化会阻止原路径显示页面（因为这个菜单项已经没有了）。 只能手动前往
 * ' examples/menu_example/menu_altered_path'。
 *
 * 记住 hook_menu_alter() 只会在 menu_rebuild() 的时候运行，不是每次都会发生，
 * 通常在缓存清空时会被触发。
 *
 *
 * $items参数是一个完整的菜单路由项，将被写入menu_router表。
 */
function menu_example_menu_alter(&$items) {
  if (!empty($items['examples/menu_example/menu_original_path'])) {
    $items['examples/menu_example/menu_altered_path'] = $items['examples/menu_example/menu_original_path'];
    $items['examples/menu_example/menu_altered_path']['title'] = 'Menu item altered by hook_menu_alter()';
    unset($items['examples/menu_example/menu_original_path']);
  }

  // Here we will change the title callback to our own function, changing the
  // 'user' link from the traditional to always being "username's account".
  // 这里我们把 title callback 设置为我们自己的函数，把 'user' 变为 "某某某'的账号"
  if (!empty($items['user/%user'])) {
    $items['user/%user']['title callback'] = 'menu_example_user_page_title';
  }
}

/**
 * 用于变更 '/user' 菜单的 Title callback。
 *
 * @param string $base_string
 *   在当前用户的名字之前加入的字符串。
 * @return string
 */
function _menu_example_simple_title_callback($base_string) {
  global $user;
  $username = !empty($user->name) ? $user->name : t('anonymous');
  return $base_string . ' ' . $username;
}

/**
 * 一个 Title callback，基于 user_page_title()， 用来动态的修改标题。
 * @param object $account
 *   访问页面的用户账号
 * @return string
 */
function menu_example_user_page_title($account) {
  return is_object($account) ? t("@name's account", array('@name' => format_username($account))) : '';
}

/**
 * Implements hook_menu_link_alter().
 *
 * This code will get the chance to alter a menu link when it is being saved
 * in the menu interface at admin/build/menu. Whatever we do here overrides
 * anything the user/administrator might have been trying to do.
 *
 * 这段代码会在 admin/build/menu 保存菜单的时候执行。
 * 这里的行为会覆盖用户尝试进行的修改。
 *
 * @param $item
 * @param $menu
 */
function menu_example_menu_link_alter(&$item, $menu) {

  // 不管管理员在web界面做了什么。都把连接的标题保持为 'Clear cache'，
  if ($item['link_path'] == 'devel/cache/clear') {
    $item['link_title'] = 'Clear Cache';
  };
}

/**
 * 根据 $id 获取内容。
 *
 * 这里只不过是创建一个字符串。在真实情况下，可能会返回复杂类型的数据。
 *
 * @param int $id
 *   数据项的ID
 * @return null|string
 */
function menu_example_arg_optional_load($id) {
  $mapped_value = _menu_example_mappings($id);
  if (!empty($mapped_value)) {
    return t('Loaded value was %loaded', array('%loaded' => $mapped_value));
  } else {
    return t('Sorry, the id %id was not found to be loaded', array('%id' => $id));
  }
}

/**
 * 工具函数，用于为通配符提供缺省参数。
 *
 * to_arg() 函数用于为通配符提供一个缺省的参数。用于在没有提供参数的时候提供一个参数。
 * 例如，在 'examples/menu_example/default_arg/%menu_example_arg_optional'菜单中，第三个参数
 * 是必要的，因为其中存在占位符，菜单系统也无法为其提供一个链接。然而如果提供了 to_arg() 函数的话，
 * 这一函数会填充 %menu_example_arg_optional，菜单系统就可以为其建立链接。
 *
 * @param string $arg
 *   The arg (URL fragment) to be tested.
 * @return int|string
 */
function menu_example_arg_optional_to_arg($arg) {
  // 如果没有提供参数，则返回99.
  return (empty($arg) || $arg == '%') ? 99 : $arg;
}
/**
 * @} End of "defgroup menu_example".
 */
